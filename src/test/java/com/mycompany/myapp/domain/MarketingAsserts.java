package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MarketingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketingAllPropertiesEquals(Marketing expected, Marketing actual) {
        assertMarketingAutoGeneratedPropertiesEquals(expected, actual);
        assertMarketingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketingAllUpdatablePropertiesEquals(Marketing expected, Marketing actual) {
        assertMarketingUpdatableFieldsEquals(expected, actual);
        assertMarketingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketingAutoGeneratedPropertiesEquals(Marketing expected, Marketing actual) {
        assertThat(expected)
            .as("Verify Marketing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketingUpdatableFieldsEquals(Marketing expected, Marketing actual) {
        assertThat(expected)
            .as("Verify Marketing relevant properties")
            .satisfies(e -> assertThat(e.getCampaign_name()).as("check campaign_name").isEqualTo(actual.getCampaign_name()))
            .satisfies(
                e ->
                    assertThat(e.getStart_date())
                        .as("check start_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStart_date())
            )
            .satisfies(
                e ->
                    assertThat(e.getEnd_date())
                        .as("check end_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getEnd_date())
            )
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMarketingUpdatableRelationshipsEquals(Marketing expected, Marketing actual) {}
}
