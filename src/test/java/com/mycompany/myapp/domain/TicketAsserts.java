package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TicketAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketAllPropertiesEquals(Ticket expected, Ticket actual) {
        assertTicketAutoGeneratedPropertiesEquals(expected, actual);
        assertTicketAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketAllUpdatablePropertiesEquals(Ticket expected, Ticket actual) {
        assertTicketUpdatableFieldsEquals(expected, actual);
        assertTicketUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketAutoGeneratedPropertiesEquals(Ticket expected, Ticket actual) {
        assertThat(expected)
            .as("Verify Ticket auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketUpdatableFieldsEquals(Ticket expected, Ticket actual) {
        assertThat(expected)
            .as("Verify Ticket relevant properties")
            .satisfies(e -> assertThat(e.getContact_name()).as("check contact_name").isEqualTo(actual.getContact_name()))
            .satisfies(e -> assertThat(e.getAccount_name()).as("check account_name").isEqualTo(actual.getAccount_name()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getSubject()).as("check subject").isEqualTo(actual.getSubject()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getProduct_name()).as("check product_name").isEqualTo(actual.getProduct_name()))
            .satisfies(
                e ->
                    assertThat(e.getDue_date())
                        .as("check due_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getDue_date())
            )
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getChannel()).as("check channel").isEqualTo(actual.getChannel()))
            .satisfies(e -> assertThat(e.getClassifications()).as("check classifications").isEqualTo(actual.getClassifications()))
            .satisfies(e -> assertThat(e.getAttachments()).as("check attachments").isEqualTo(actual.getAttachments()))
            .satisfies(
                e ->
                    assertThat(e.getAttachmentsContentType())
                        .as("check attachments contenty type")
                        .isEqualTo(actual.getAttachmentsContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketUpdatableRelationshipsEquals(Ticket expected, Ticket actual) {}
}
