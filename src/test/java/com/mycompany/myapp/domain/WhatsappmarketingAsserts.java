package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WhatsappmarketingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWhatsappmarketingAllPropertiesEquals(Whatsappmarketing expected, Whatsappmarketing actual) {
        assertWhatsappmarketingAutoGeneratedPropertiesEquals(expected, actual);
        assertWhatsappmarketingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWhatsappmarketingAllUpdatablePropertiesEquals(Whatsappmarketing expected, Whatsappmarketing actual) {
        assertWhatsappmarketingUpdatableFieldsEquals(expected, actual);
        assertWhatsappmarketingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWhatsappmarketingAutoGeneratedPropertiesEquals(Whatsappmarketing expected, Whatsappmarketing actual) {
        assertThat(expected)
            .as("Verify Whatsappmarketing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWhatsappmarketingUpdatableFieldsEquals(Whatsappmarketing expected, Whatsappmarketing actual) {
        assertThat(expected)
            .as("Verify Whatsappmarketing relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreated_On()).as("check created_On").isEqualTo(actual.getCreated_On()))
            .satisfies(e -> assertThat(e.getCreated_by()).as("check created_by").isEqualTo(actual.getCreated_by()))
            .satisfies(e -> assertThat(e.getRecipents()).as("check recipents").isEqualTo(actual.getRecipents()))
            .satisfies(e -> assertThat(e.getReport()).as("check report").isEqualTo(actual.getReport()))
            .satisfies(e -> assertThat(e.getAction()).as("check action").isEqualTo(actual.getAction()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWhatsappmarketingUpdatableRelationshipsEquals(Whatsappmarketing expected, Whatsappmarketing actual) {}
}
