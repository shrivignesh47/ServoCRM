package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class DealAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealAllPropertiesEquals(Deal expected, Deal actual) {
        assertDealAutoGeneratedPropertiesEquals(expected, actual);
        assertDealAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealAllUpdatablePropertiesEquals(Deal expected, Deal actual) {
        assertDealUpdatableFieldsEquals(expected, actual);
        assertDealUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealAutoGeneratedPropertiesEquals(Deal expected, Deal actual) {
        assertThat(expected)
            .as("Verify Deal auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealUpdatableFieldsEquals(Deal expected, Deal actual) {
        assertThat(expected)
            .as("Verify Deal relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getDeal_name()).as("check deal_name").isEqualTo(actual.getDeal_name()))
            .satisfies(
                e ->
                    assertThat(e.getClosing_date())
                        .as("check closing_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getClosing_date())
            )
            .satisfies(e -> assertThat(e.getStage()).as("check stage").isEqualTo(actual.getStage()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(
                e ->
                    assertThat(e.getProbability_Percentage())
                        .as("check probability_Percentage")
                        .isEqualTo(actual.getProbability_Percentage())
            )
            .satisfies(e -> assertThat(e.getCompaign_Source()).as("check compaign_Source").isEqualTo(actual.getCompaign_Source()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDealUpdatableRelationshipsEquals(Deal expected, Deal actual) {
        assertThat(expected)
            .as("Verify Deal relationships")
            .satisfies(e -> assertThat(e.getAccounts()).as("check accounts").isEqualTo(actual.getAccounts()))
            .satisfies(e -> assertThat(e.getContacts()).as("check contacts").isEqualTo(actual.getContacts()))
            .satisfies(e -> assertThat(e.getLead()).as("check lead").isEqualTo(actual.getLead()));
    }
}
