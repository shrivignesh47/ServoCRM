package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getProduct_name()).as("check product_name").isEqualTo(actual.getProduct_name()))
            .satisfies(e -> assertThat(e.getProduct_code()).as("check product_code").isEqualTo(actual.getProduct_code()))
            .satisfies(e -> assertThat(e.getProduct_category()).as("check product_category").isEqualTo(actual.getProduct_category()))
            .satisfies(e -> assertThat(e.getManufacture()).as("check manufacture").isEqualTo(actual.getManufacture()))
            .satisfies(
                e ->
                    assertThat(e.getSales_start_date())
                        .as("check sales_start_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getSales_start_date())
            )
            .satisfies(e -> assertThat(e.getSales_end_date()).as("check sales_end_date").isEqualTo(actual.getSales_end_date()))
            .satisfies(
                e ->
                    assertThat(e.getSales_Ending_date())
                        .as("check sales_Ending_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getSales_Ending_date())
            )
            .satisfies(
                e ->
                    assertThat(e.getSupport_start_date())
                        .as("check support_start_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getSupport_start_date())
            )
            .satisfies(
                e ->
                    assertThat(e.getSupport_end_date())
                        .as("check support_end_date")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getSupport_end_date())
            )
            .satisfies(e -> assertThat(e.getUnit_price()).as("check unit_price").isEqualTo(actual.getUnit_price()))
            .satisfies(e -> assertThat(e.getCommission_rate()).as("check commission_rate").isEqualTo(actual.getCommission_rate()))
            .satisfies(e -> assertThat(e.getTax()).as("check tax").isEqualTo(actual.getTax()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {}
}
