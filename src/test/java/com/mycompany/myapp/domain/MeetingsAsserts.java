package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MeetingsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingsAllPropertiesEquals(Meetings expected, Meetings actual) {
        assertMeetingsAutoGeneratedPropertiesEquals(expected, actual);
        assertMeetingsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingsAllUpdatablePropertiesEquals(Meetings expected, Meetings actual) {
        assertMeetingsUpdatableFieldsEquals(expected, actual);
        assertMeetingsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingsAutoGeneratedPropertiesEquals(Meetings expected, Meetings actual) {
        assertThat(expected)
            .as("Verify Meetings auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingsUpdatableFieldsEquals(Meetings expected, Meetings actual) {
        assertThat(expected)
            .as("Verify Meetings relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(
                e ->
                    assertThat(e.getLocation_Offline_Detail())
                        .as("check location_Offline_Detail")
                        .isEqualTo(actual.getLocation_Offline_Detail())
            )
            .satisfies(e -> assertThat(e.getFrom()).as("check from").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getFrom()))
            .satisfies(e -> assertThat(e.getTo()).as("check to").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getTo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingsUpdatableRelationshipsEquals(Meetings expected, Meetings actual) {}
}
